package edu.store.command;

import org.osgi.service.component.ComponentFactory;
import org.osgi.service.component.ComponentInstance;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.osgi.service.component.annotations.ReferenceCardinality;
import org.osgi.service.component.annotations.ReferencePolicy;

import edu.store.api.ClientStore;

@Component(
	    property= {
	        "osgi.command.scope=edu",
	        "osgi.command.function=test"},
	    service=Command.class
	)
public class Command {
	
    @Reference(
    		target = "(component.factory=edu.magasin.client.factory)",
    		cardinality = ReferenceCardinality.MULTIPLE,
    		policy = ReferencePolicy.DYNAMIC)
    private ComponentFactory factory;
    
	@Reference( //
	target = "(component.factory=edu.magasin.client.factory)", //
	cardinality = ReferenceCardinality.MULTIPLE, //
	policy = ReferencePolicy.DYNAMIC //
	)
	protected void bind(final ComponentFactory s,
			final Map<String, Object> props) {

		factory = s;

		/** this is in the osgi spec */
		log.info("bind component.factory : {}", props.get("component.factory"));
		log.info("bind component.name    : {}", props.get("component.name"));

		/** this is NOT in the osgi spec, WHY? */
		log.info("bind custom-value      : {}", props.get("custom-value"));

	}
 
    public void shoot(String target) {
        // create a new service instance
        ComponentInstance instance = this.factory.newInstance(null);
        ClientStore clientStore = (ClientStore) instance.getInstance();
        try {
            //clientStore.shoot(target);
            System.out.println("SALUT JE SUIS UN CLIENT");
        } finally {
            // destroy the service instance
            instance.dispose();
        }
    }
}
